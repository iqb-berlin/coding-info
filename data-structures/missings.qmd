---
lang: de
title: Missings
format:
  html:
    toc: true
    toc-expand: 2
---

# Begriff

Mit dem Begriff "Missings" werden Zustände in den Daten kodiert, die von einer normalen auswertbaren Antwort abweichen. Statt eines Wertes, der für die Antwort bzw. für den Code einer Antwort steht, wird in den Datensatz ein Wert eingetragen, der eine fehlerhafte bzw. von der erwarteten Beantwortung abweichende Situation beschreibt. Üblicherweise sind gültige, zulässige Antworten mit positiven Zahlen ausgedrückt, ein Missing jedoch mit einem negativen Wert.

# Standard-Missings des IQB

```{mermaid}
flowchart TD
    C{Antwort im System\ngespeichert?} -->|JA| A{Item wurde\ngesehen?}
    A -->|JA| F{Item wurde \nbearbeitet?}
    style G fill:#ff9
    F -->|JA| H{Antwort ungültig,\nleer oder Spaßantwort?}
    A -->|NEIN| I{nachfolgend\nbearbeitete oder\ngesehene Items?}
    F -->|NEIN| J[missing\nby omission]
    I -->|JA| J
    I -->|NEIN| G[missing\nnot reached]
    style J fill:#ff9
    H -->|JA| K[missing\ninvalid response]
    style K fill:#ff9
    H -->|NEIN| L["Gültige Antwort\nAuswertung möglich"]
    style L fill:#af8

    C -->|NEIN| B{Technisches\nProblem?}
    B -->|JA| D[missing\ncoding impossible]
    style D fill:#ff9
    B -->|NEIN| E[missing\nby design]
    style E fill:#ff9

```

| ID | Label | Beschreibung | Code-Value |
|---|---|---------|--:|
| mir | missing invalid response | (1) Item wurde bearbeitet und (2a) leere Antwort oder (2b) sonstwie ungültige (Spaß-)Antwort | -98 |
| mbo | missing by omission | Item wurde nicht bearbeitet aber gesehen oder es wurde nicht gesehen, aber es gibt nachfolgend gesehene oder bearbeitete Items | -99 |
| mnr | missing not reached | (1) Item wurde nicht gesehen und (2) es folgen nur nicht gesehene Items | -96 |
| mci | missing coding impossible | (1) Item müsste/könnte bearbeitet worden sein und (2) Antwort ist aufgrund technischer Probleme nicht auswertbar | -97 |
| mbd | missing by design | Antwort liegt nicht vor, weil das Item der Testperson planmäßig nicht präsentiert wurde | -94 |

: IQB-Missings {.striped}

# Verfahren

Die Datenstruktur [`response`](response.qmd), die durch die TBA-Webanwendung IQB-Testcenter erzeugt wird, sieht Missings nicht vor. Statt dessen wird neben dem Antwortwert ein Status geliefert. Erst zu einem späteren Zeitpunkt -- im Rahmen der Kodierung und Ableitung -- wird die Datenstruktur `response` in einen einzelnen numerischen ganzzahligen Code transformiert. Diese Transformation bedeutet in der Regel Informationsverlust, ist aber Voraussetzung für die nachfolgenden Datenanalysen.

## Rohdaten

(1) Bei Speicherplatzproblemen können alle Fälle herausgefiltert werden, die als Status `UNSET` oder `NOT_REACHED` gesetzt haben. Deren Werte (Values) sind grundsätzlich zu ignorieren und können aus den Antwortdaten entfernt werden.
(2) Alle anderen Fälle müssen in den ersten Autocoder-Lauf gegeben werden.

## Erster Autocoder-Lauf

(3) Im Kodierschema kann festgelegt werden, dass ein Antwortstatus `DISPLAYED` sowie bei `VALUE_CHANGED` ein leerer Antwortwert relevant sind. In beiden Fällen wird regulär kodiert und der Status `CODING_COMPLETE` vergeben. Sollten diese beiden Fälle nicht als relevant markiert worden sein, wird `DISPLAYED` nicht verändert und ein leerer Antwortwert von `VALUE_CHANGED` in `INVALID` geändert.
(4) Kann eine Variable nicht abgeleitet werden, weil deren Basisvariablen keinen hinreichenden Status haben, bekommt die abgeleitete Variable den kleinsten Status der Basisvariablen: `UNSET` {{< fa chevron-right >}} `NOT_REACHED` {{< fa chevron-right >}} `DISPLAYED` {{< fa chevron-right >}} `DERIVE_ERROR` {{< fa chevron-right >}} `INVALID` {{< fa chevron-right >}} `CODING_ERROR`
(5) Es gibt nach dem Autocoder-Lauf Fehlerzustände, denen gezielt nachgegangen werden muss. Vielen der Fälle kann man begegnen, indem man das jeweilige Kodierschema ergänzt oder korrigiert.

## Manuelle Kodierung

(6) Alle Fälle für `CODING_INCOMPLETE` und `CODING_ERROR` werden manuell kodiert.
(7) Als Ergebnis der manuellen Kodierung sind als Status `CODING_COMPLETE`, `CODING_ERROR` (technisches Problem beim Kodieren) und `INVALID` möglich.

## Zweiter Autocoder-Lauf

(8) Nach der manuellen Kodierung folgt ein weiterer Autocoder-Kauf, da es ggf. abgeleitete Variablen gibt, die auf den nun verfügbaren Codes basieren.
(9) Eine Kodierung ist abgeschlossen, wenn die Antworten ausschließlich folgende Stati angenommen haben: `UNSET`, `NOT_REACHED`, `DISPLAYED`, `INVALID`, `CODING_COMPLETE`, `CODING_ERROR` und `NO_CODING`.
(10) Die folgenden Stati dürfen nicht auftreten: `VALUE_CHANGED`, `CODING_INCOMPLETE` und `DERIVE_ERROR`

## Rekodierung der Missing-Zustände

### Gegebene Antworten
 
| Status | Neuer Code | Beschreibung |
|---|---:|---------|
| `CODING_COMPLETE` | - | Wird nicht rekodiert, da ein gültiger verwertbarer Code bereits vergeben wurde. |
| `NO_CODING` | - | Hier handelt es sich z. B. um freie Eingaben, die nicht kodiert werden sollen (z. B. Sprache zu Hause). Diese müssen aus den Daten extrahiert werden, da sie nicht in die Datenanalyse einfließen. |
| `INVALID` | -98 | mir - missing invalid response |
| `CODING_ERROR` | -97 | mci - missing coding impossible |

### Mögliche, aber nicht gegebene Antworten

(11) Das Testheft-Design muss abgefragt werden um festzustellen, welche Units (und damit Variablen) in den Antwortdaten zu finden sein müssten und welche nicht. Es muss für die Units, die der Testperson vorgelegt wurden, eine Reihenfolge (Sequenz) bekannt sein.

#### Für die letzte in der Sequenz der vorgelegten Units

| Status | Neuer Code | Beschreibung |
|---|---:|---------|
| `UNSET`, `DISPLAYED` | -99 | mbo - missing by omission |
| `NOT_REACHED` | -96 | mnr - missing not reached |

#### Für alle vorherigen Units

| Status | Neuer Code | Beschreibung |
|---|---:|---------|
| `UNSET`, `DISPLAYED`, `NOT_REACHED` | -99 | mbo - missing by omission |

#### Für alle nicht gefundenen Variablen

* Units VOR der letzten: -99 (mbo - missing by omission)
* Units NACH der letzten: -96 (mnr - missing not reached)

### Nicht mögliche Antworten

* Variablen werden hinzugefügt, die der Person planmäßig nicht vorgelegt wurden, aber in der Studie vorgesehen sind. Sie erhalten alle den Code -94 (mbd - missing by design).

# Technische Diskurse

## Missing by Omission wenn leer?

Wenn eine Eingabe bearbeitet wurde und dann wieder herausgelöscht, könnte man überlegen, statt einer ungültigen Antwort eine beabsichtigte Auslassung (Omission) anzunehmen. Die Testperson wollte wohl den Ausgangszustand wiederherstellen. Hier gibt es einige Probleme:

* Bei Interaktionenselementen kann man oft einen Wert als Vorbelegung festlegen. Ein Herauslöschen würde nicht den Anfangszustand wiederherstellen.
* Der Aspect-Player hat ein Eingabeelement, das mit einem Satz ohne Satzzeichen vorbelegt ist. Die Testperson kann nur eingeschränkt Zeichen einfügen oder löschen. Der Wert der Eingabe ist stets mindestens die Vorbelegung. Die Option 'leer' gibt es nicht.
* Bei einigen Interaktionselementen ist die Testperson vielleicht überzeugt, den Ausgangszustand wiederhergestellt zu haben, es gibt aber unsichtbare Reste der Bearbeitung (z. B. Textmarkierung, GeoGebra: Verschieben und Zurückschieben von Punkten). Das wird unfairerweise dann unsystematisch unterschiedlich bewertet.

::: {.callout-caution}
## Umsetzung

Ein bearbeiteter, aber leerer Wert wird als invalid bewertet. Dieses Standardverhalten kann durch eine Option im Kodierschema geändert werden, und es gibt auch eine Regel, die auf einen leeren Wert prüft. Dann ist es auch möglich, einen Code für einen leeren Wert zu vergeben.
:::

## Status `DISPLAYED ` überspringen?

Das IQB-Testsystem registriert, wenn ein Interaktionselement in den Sichtbereich kommt: Status `DISPLAYED`. Wenn eine Interaktion erfolgte, wird der Status `VALUE_CHANGED` gesetzt (zum Status einer Antwort siehe [hier](response.qmd)). Es gibt nun Interaktionselemente, deren Ausgangswert mit hoher Wahrscheinlichkeit der gewünschte Endwert sein soll und das ist dann auch gelegentlich die richtige Antwort. Im Kodierprozess werden standardmäßig nur Antworten mit Status `VALUE_CHANGED` ausgewertet.

::: {.callout-caution}
## Umsetzung

Im Kodierschema gibt es eine Option, mit der man für eine Variable festlegen kann, dass der Wert auch bei `DISPLAYED` ausgewertet wird, also dann wie `VALUE_CHANGED` behandelt wird.
:::

## Wo ist das Item?

Wenn es als 17. Teilaufgabe ein Item mit der Instruktion "markiere im Text" gibt, weicht der Ort der Beantwortung (also die Interaktion "Markieren" im Stimulus) räumlich stark vom Ort des Items ab, wie er überlicherweise verstanden wird. Die Frage, ob das Item gesehen wurde, wird aktuell falsch beantwortet: Wenn der Stimulustext gesehen wurde.

::: {.callout-caution}
## Mögliche Umsetzung

Man könnte für Elemente der Unit, die keine Interaktionselemente sind, eine Art Dummy-Variable einrichten. Deren Wert ist unwichtig, aber sie liefert einen Status. Dann könnte ein Textelement (Instruktion des Items) mit in die Kodierung einfließen.
:::
