---
lang: de
title: Ableitungen
---

# Zulässiger Status

Ob eine Ableitung möglich ist, ist vom Status der Quellvariablen und von der Ableitungsmethode `sourceType` abhängig. Für jede Quellvariable muss einer der folgenden Status zutreffen, damit eine Ableitung erfolgt:

| Ableitungsmethode | zulässiger Status |
|------|-------|
|`MANUAL`|`INVALID`, `VALUE_CHANGED`[^1], `CODING_COMPLETE`, `CODING_INCOMPLETE`, `CODING_ERROR`, `NO_CODING`|
|`COPY_VALUE`, `UNIQUE_VALUES`, `SOLVER`|`VALUE_CHANGED`, `CODING_COMPLETE`, `CODING_INCOMPLETE`, `CODING_ERROR`, `NO_CODING`|
|`CONCAT_CODE`, `SUM_CODE`, `SUM_SCORE`|`CODING_COMPLETE`|

: Zulässiger Status nach Ableitungsmethode {.striped}

Bei der Ableitungsmethode `MANUAL` wird die abgeleitete Variable ggf. neu angelegt und dann der Status `CODING_INCOMPLETE` gesetzt. Auch wenn Regeln für die Kodierung der abgeleiteten Variable hinterlegt sein sollten, wird nie eine automatische Kodierung versucht. Ist die Variable bereits vorhanden, wird deren Status durch den Autocoder nicht verändert.

Bei allen anderen Ableitungsmethoden versucht der Autocoder eine Kodierung entsprechend der Parameter und Regeln.

# Fehlersituation

Wenn die Quellvariablen nicht die o. g. Bedingungen an den Status erfüllen, muss ein aussagekräftiger Status für die neue Variable gesetzt werden. Für die folgenden Schritte ist die Reihenfolge relevant.

## Schritt 1: Killer

Wenn eine der Quellvariablen einen der folgenden linken Status hat, dann erhält die abgeleitete Variable den rechten Status - egal, welchen Status die anderen Quellvariablen haben. Die Liste wird von oben nach unten abgearbeitet.

1) `UNSET` &rarr; `UNSET`
1) `DERIVE_ERROR` &rarr; `DERIVE_ERROR`
1) `NO_CODING` &rarr; `DERIVE_ERROR`
1) `CODING_ERROR` &rarr; `CODING_ERROR`
1) `INVALID` &rarr; `INVALID`

## Schritt 2: Warten auf manuelle Kodierung

Die Ableitungsmethoden `CONCAT_CODE`, `SUM_CODE` und `SUM_SCORE` setzen eine vollständige Kodierung voraus: `CODING_COMPLETE`. Sollte eine oder mehrere Quellvariablen den Status `CODING_INCOMPLETE` oder `DERIVE_PENDING` haben, dann wird der Status der abgeleiteten Variable auf `DERIVE_PENDING` gesetzt.

## Schritt 3: Erben von Fehlerzuständen

Für die verbliebenen Fehlerzustände der Ableitungen soll der Status gezielt gesetzt werden, um die Nachbereitung oder das Setzen von Missings zu erleichtern:

1) Es gibt mindestens einen zulässigen Status und mindestens einen unzulässigen Status &rarr; `INVALID`
1) Es gibt keinen zulässigen Status und alle Status sind gleich &rarr; Übernahme des Status der Quellvariablen für die abgeleitete Variable
1) Die Quellvariablen haben einen Mix aus `NOT_REACHED`, `DISPLAYED` oder `PARTLY_DISPLAYED` &rarr; `PARTLY_DISPLAYED`

[^1]: `VALUE_CHANGED` meint an dieser Stelle den geprüften Status, d. h. es kann auch `DISPLAYED` einschließen, wenn `TAKE_DISPLAYED_AS_VALUE_CHANGED` gesetzt ist, und prüft, dass der Wert nicht leer ist bzw.  `TAKE_EMPTY_AS_VALID` gesetzt ist.